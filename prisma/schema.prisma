// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id            Int            @id @default(autoincrement())
  category_id   String         @db.VarChar(100)
  category_name String         @db.VarChar(100)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  is_deleted    Boolean        @default(false)
  UserCategory  UserCategory[]

  @@unique([category_id])
  @@map("category_list")
}

model UserCategory {
  id          Int      @id @default(autoincrement())
  user_id     String   @db.VarChar(100)
  category_id String   @db.VarChar(100)
  Category    Category @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  is_deleted  Boolean  @default(false)

  @@index([user_id])
  @@index([user_id, category_id], name: "user_category_index")
  @@map("user_category")
}

model User {
  id         Int      @id @default(autoincrement())
  user_id    String   @db.VarChar(100)
  email      String   @db.VarChar(200)
  password   String   @db.VarChar(250)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  is_deleted Boolean  @default(false)

  @@index([user_id])
  @@index([email])
  @@map("users")
}
